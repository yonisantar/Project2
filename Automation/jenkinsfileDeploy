pipeline{
    agent any
    environment {
        TERRAFORM_FOLDER_NAME= 'Terraform'
        REPO_NAME = 'devops-personal-project'
        APP_REPO = "https://github.com/devopsPRO27/${REPO_NAME}.git"        
        APP_DIRECTORY = "api"
        FOLDER_NAME= "${REPO_NAME}/${APP_DIRECTORY}"
        CONTAINER_NAME = 'api-app'
        EXTERNAL_APP_PORT = '5000'
        INTERNAL_APP_PORT = '5000'
        TAG = 'v1.${BUILD_NUMBER}'
        ACCOUNT_NAME= 'yit1977ltld/apiproject'
        IMAGE_NAME = "${ACCOUNT_NAME}:latest"
        REGISTRY= 'hub.docker.com'
        DOCKERHUB_CREDENIALS = credentials('DockerCred')
        SHARED_WORKSPACE = '/var/jenkins_home/workspace/Deploy Enviroment'
        CREDENTIALS_ID = 'devopsSSH'
        USER_NAME = 'ubuntu'
        JSON_TEST_REQUEST = '{\"ip\": \"8.8.8.8\"}'
        OK_STATUS_CODE = '200'
        URL_TRACERT = 'traceroute'
        URL_VALIDATE_IP = 'validate_ip'
    }    
     stages {
       stage("Clone App source code"){
            steps{
                sh 'pwd'
                sh 'ls -la'
                sh "rm -rf ${REPO_NAME}"
                sh "git clone ${APP_REPO}"
                }            
            post{
               always{
                    // Delete docker file
                    sh "rm -f Dockerfile "
                }                
                success{
                    echo "App Clone Success"
                }
                failure{
                    echo "App Clone Failure"
                }
            }
        }
        stage("build image"){
            steps{
                dir("${FOLDER_NAME}") {
                    sh 'pwd'
                    sh 'ls -la'     
                    sh "docker build  -f ../../Automation/Dockerfile -t ${IMAGE_NAME} ."     
                }
            }
            post{
                always{
                    // Delete docker file
                    sh "rm -f Dockerfile "
                }
                success{
                    echo "Api App Build Success"
                }
                failure{
                    echo "oooApi App Build Failure"
                }
            }
        }
       stage("Test Image"){            
            steps{
                    // Delete Container If Exsits
                    sh "docker rm -f ${CONTAINER_NAME}"                
                    // Create New Container
                    sh "docker run -d --network=host --name ${CONTAINER_NAME} -p ${EXTERNAL_APP_PORT}:${INTERNAL_APP_PORT} ${IMAGE_NAME}:${TAG}"   
                    sh "sleep 2 && timeout 5 ping localhost -c 4 -p ${EXTERNAL_APP_PORT}"                 
            }
            post{
                success{
                    echo "Container is answering - OK"
                }
                failure{
                    echo "Container is not answering - Failure"
                }
            }                
        }

        stage("Login to DockerHub"){
            steps{
                sh 'echo ${DOCKERHUB_CREDENIALS_USR}'
                sh "echo ${DOCKERHUB_CREDENIALS_PSW} | docker login -u ${DOCKERHUB_CREDENIALS_USR} --password-stdin "
            }
        
        }

         stage("push image"){
            steps{
                sh "docker tag ${IMAGE_NAME}:${TAG} ${ACCOUNT_NAME}:${TAG}"
                sh "docker tag ${IMAGE_NAME}:${TAG} ${ACCOUNT_NAME}:latest" // Tag the image as latest
                sh "docker images"
                sh "docker push ${ACCOUNT_NAME}:${TAG}" 
                sh "docker push ${ACCOUNT_NAME}:latest" // Push the latest tag
            }
        
        }

    }
    post{
        always {
            script {
                if (env.PUBLIC_IP) {
                    echo "Server PUBLIC_IP is : ${PUBLIC_IP}"
                } else {
                    echo "PUBLIC_IP is empty"
                }
            }
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
